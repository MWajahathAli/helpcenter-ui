# Default values from helm chart
# https://github.com/massmutual/swift-helm-charts/blob/main/charts/mmkubeapps/values.yaml

# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Deployment type.
bluegreen:
    enabled: false
    
green:
  enabled: true

blue:
  enabled: true

productionSlot: green

replicaCount: 3
minReadySeconds: 35

nameOverride: "react-hello-world1-nonprd"
fullnameOverride: "react-hello-world1-nonprd"

container:
  port: 8080
  path: /

service:
  type: ClusterIP
  port: 8080

replicaCount: 3
minReadySeconds: 35

podAnnotations: {}

podSecurityContext:
  fsGroup: 0

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 0
  runAsGroup: 0

## Configure extra options for containers' liveness and readiness probes
## Configure extra options for Apache server containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## @param startupProbe.enabled Enable startupProbe
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
## @param livenessProbe.enabled Enable liveness probe
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
## @param readinessProbe.enabled Enable readiness probe
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
## @param customStartupProbe Custom liveness probe for the Web component
##
customStartupProbe: {}
## @param customLivenessProbe Custom liveness probe for the Web component
##
customLivenessProbe: {}
## @param customReadinessProbe Custom rediness probe for the Web component
##
customReadinessProbe: {}
## @param extraVolumes Array to add extra volumes (evaluated as a template)
##
ingress:
  enabled: true
  # In case of external LB, className would be external-alb. In case of internal LB, className would be alb(default)
  className: "alb"
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # In case of external LB, scheme would be internet-facing. In case of internal LB, scheme would be internal(default)
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    # In case of internal load balancers, the subnets are auto discovered(For Upgarded EKS clusters). However, when using the internet-facing load balancer providing subnets in the below annotation is mandatory.
    alb.ingress.kubernetes.io/subnets: subnet-05144eec7105a4c00, subnet-0bb4321e920b5ab5c, subnet-05c93895f07271f91
    # The DNS name can be provided in the below annotation or under the host section
    # external-dns.alpha.kubernetes.io/hostname: reactjus-nonprod.alpmgmt.nsawsprd.massmutual.com
    # When using DNS, certificate ARN can also be auto-discovered.
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:639672021601:certificate/fcd93fb3-51af-48ea-93f2-6d5fc36d2118
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/actions.ssl-redirect: '443'

  hosts:
    - host: reactjus-nonprod.alpmgmt.nsawsprd.massmutual.com
      paths:
        - path: /
          pathType: Prefix
          
  hostsproduction:
    - host: production.local
      paths:
        - path: /
          pathType: Prefix

  hostsstage:
    - host: stage.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 100m
    memory: 200Mi
  requests:
    cpu: 50m
    memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # If existing service account from the same namespace needs to be used, set create to false and provide the name of the serviceAccount
  # Annotations to add to the service account
  annotations: {}
    # Enable annotations and add the below annotation to use IRSA
    # eks.amazonaws.com/role-arn: arn:aws:iam::xxxxxxxxxxxxxx:role/eks-irsa-role
    # Note: The name of the service account should match with the service account used in the IAM role trust relatioship
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
  name: ""

secretsmanager:
  enabled: false
env:
  normal:    
    # env1: "value1"
    # env2: "value2"
  secret:
    # secret-name-from-secret-manager1:
    #   key:
    #     - envName1
    #     - envName2
    # secret-name-from-secret-manager2:
    #   key:
    #     - envName1
    #     - envName2
